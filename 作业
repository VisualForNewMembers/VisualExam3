# VisualExam3
做游戏
# include <stdio.h>
# include <conio.h>
# include <stdlib.h>
# include <stdbool.h>
# include <windows.h>
#include <fstream>
#include <iostream>
using namespace std;
int map[8][15][15] =
{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,13,0,0,0,1,4,0,1,0,0,0,0,1,
	1,4,0,0,0,0,2,3,8,1,0,8,0,0,1,
	1,1,1,1,1,1,1,8,8,1,0,7,0,0,1,
	1,0,0,0,0,0,0,0,0,1,0,0,0,3,1,
	1,0,0,0,1,1,1,1,1,1,2,1,1,1,1,
	1,0,5,0,1,0,0,0,0,0,0,0,7,0,1,
	1,0,0,0,2,0,0,0,0,0,0,8,8,8,1,
	1,0,0,0,1,0,0,0,0,0,0,11,4,0,1,
	1,0,0,8,1,1,1,1,3,1,1,1,1,1,1,
	1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,1,0,0,0,8,0,0,0,0,0,1,
	1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,7,0,0,9,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	

	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,11,0,8,8,0,1,0,0,0,0,0,0,0,1,
	1,0,0,8,4,8,1,0,0,0,0,0,0,0,1,
	1,0,0,0,8,0,1,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,0,0,7,0,0,0,0,1,
	1,1,2,1,1,1,1,0,0,0,1,1,1,1,1,
	1,0,5,0,0,6,1,0,0,0,1,0,0,0,1,
	1,0,0,0,0,0,1,8,8,8,1,0,4,0,1,
	1,0,3,0,0,0,1,1,2,1,1,0,7,0,1,
	1,3,4,3,0,0,0,0,3,3,0,0,0,0,1,
	1,0,3,0,0,0,0,1,1,1,1,1,1,1,1,
	1,1,1,2,1,1,1,1,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,3,0,7,0,9,0,0,1,
	1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 

	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,6,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,1,2,1,1,1,0,0,0,0,1,
	1,0,5,0,0,1,0,0,12,1,0,0,0,0,1,
	1,0,0,0,0,1,0,12,9,1,0,0,0,0,1,
	1,0,0,0,0,1,0,0,12,1,0,0,0,0,1,
	1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 

	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,9,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,5,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,99,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,9,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,5,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 

	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,9,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,5,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 

	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,9,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,5,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 

	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,9,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,5,0,0,0,0,12,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 

};

int  role_i, role_j;
int count;
int key;
int exp;
int hp=100;
int maxhp=100;
int level=1;
int role_def=20;
int role_atck=30;
int role_basatck1;
int role_alatck1;
int role_basatck2;
int role_alatck2;
int role_basatck3;
int role_alatck3;
int role_basatckb;
int role_alatckb;

int mon1_def=5;
int mon1_atck=5;
int mon1_basatck;
int mon1_alatck;
int mon1_hp=20;
int mon2_def=9;
int mon2_atck=9;
int mon2_hp=30;
int mon2_basatck;
int mon2_alatck;
int mon3_def=12;
int mon3_atck=12;
int mon3_hp=45;
int mon3_basatck;
int mon3_alatck;
int boss_def=25;
int boss_atck=35;
int boss_hp=60;
int boss_basatck;
int boss_alatck;



void gotoxy(int x, int y)
{
	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD pos;
	pos.X = x;
	pos.Y = y;
	SetConsoleCursorPosition(handle, pos);
}
void HideCursor()
{
	CONSOLE_CURSOR_INFO cursor_info = { 1, 0 };
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursor_info);
}

void startup() {
	HideCursor();
	role_i = 6;
	role_j = 2;
	count = 0;
}

void show() {
	system("color f9");
	int i, j;
	gotoxy(0, 0);
	printf("请切换英文输出，操作为 wasd 或者 ↑↓←→\n");
		printf("&,a,$,@:是怪物 \n！:是钥匙 \nD:是上锁的门 \n/:是上楼梯 |:是下楼梯\n"); 
	printf("您现在正处于第 %d 层\n", count + 1);
	printf("您现在拥有 %d 把钥匙\n", key);
	printf("您现在的血量为 %d/%d \n", hp,maxhp);
	printf("您现在的是 %d 级 (%d/50)\n", level,exp);
	printf("防御力 %d \n",role_def);
	printf("攻击力 %d \n",role_atck);
	printf("您现在的位置是(%d,%d)\n",abs(role_i-14),role_j);
	for (i = 0; i < 15; i++)
	{
		for (j = 0; j < 15; j++)
		{
			switch (map[count][i][j])
			{
				case 99:
				printf("后面还没做呢");
				break;
				case 13:
				printf("S ");
				break;
			
			case 11:
				printf("$ ");
				break;
			
			case 12:
				printf("@ ");
				break;
			
			case 7:
				printf("+ ");
				break;
			case 3:
				printf("a ");
				break;
			case 8:
				printf("& ");		
				break;
			case 4:
				printf("! ");
				break;
			case 2:
				printf("D ");
				break;	
			case 9:
				printf("/ ");
				break;
			case 6:
				printf("| ");
				break;
			case 0:
				printf("  ");
				break;
			case 1:
				printf("■");
				break;
			case 5:
				printf("♀");
				break;
			}
		}
		printf("\n");
	}

}
void updateWithoutInput() {
	int i,j; 

	for (i = 0; i < 15; i++)
	{
		for (j = 0; j < 15; j++)
		{
			if (map[count][i][j] == 5)
			{
				role_i = i;
				role_j = j;
			
			}
		}
	}

NEXT_1:
	;

	if(exp>=50)
	{
	level++;	
	exp-=50;
	maxhp+=20;
	role_def+=5;
	role_atck+=10;
	}
	
	if(hp<=0)
	{
		UINT uRet=MessageBox(NULL,"你死了！","逊！",MB_YESNO);
				if(uRet==IDYES)
				{
					exit(-1);
				}
	}
	
	role_basatck1=role_atck-mon1_def;
	if(role_basatck1<=0)
	role_alatck1=20;
	else{
	role_alatck1=20+role_basatck1;
}
	mon1_basatck=mon1_atck-role_def;
	if(mon1_basatck<=0)
	mon1_alatck=mon1_atck+0;
	else
	{
	mon1_alatck=mon1_atck+mon1_basatck;
}
/////////////////////////////////////////////////
role_basatck2=role_atck-mon2_def;
	if(role_basatck2<=0)
	role_alatck2=20;
	else{
	role_alatck2=20+role_basatck2;
}
	mon2_basatck=mon2_atck-role_def;
	if(mon2_basatck<=0)
	mon2_alatck=mon2_atck+0;
	else
	{
	mon2_alatck=mon2_atck+mon2_basatck;
}
///////////////////////////////////////////////
	role_basatck3=role_atck-mon3_def;
	if(role_basatck3<=0)
	role_alatck3=20;
	else{
	role_alatck3=20+role_basatck3;
}
	mon3_basatck=mon3_atck-role_def;
	if(mon3_basatck<=0)
	mon3_alatck=mon3_atck+0;
	else
	{
	mon3_alatck=mon3_atck+mon3_basatck;
}
////////////////////////////////////////////
	role_basatckb=role_atck-boss_def;
	if(role_basatckb<=0)
	role_alatckb=20;
	else{
	role_alatckb=20+role_basatckb;
}
	boss_basatck=boss_atck-role_def;
	if(boss_basatck<=0)
	boss_alatck=boss_atck+0;
	else
	{
	boss_alatck=boss_atck+boss_basatck;
}

}
//////////真的不会存档555555555555////// 
void save(void)
{
	if((map[count][role_i - 1][role_j] == 13)||(map[count][role_i + 1][role_j] == 13)||(map[count][role_i][role_j-1] == 13)||(map[count][role_i][role_j+1] == 13))
	{
	ofstream outfile;
	outfile.open("map3.txt",ios::out);
		outfile<<map[count]<<endl;
	}
}

void updateWithInput() {
	//用户按键输入
	char hit;
	if (_kbhit())
	{
		hit = _getch();
		//楼层调试 
		if (hit >= '1' && hit <= '8')
		{
			count = hit - 1 - '0';
		}
			
		switch (hit)
		{
		case 'w':
		case 'W':
		case 72:
			if (map[count][role_i - 1][role_j] == 0)
			{
				map[count][role_i - 1][role_j] += 5;
				map[count][role_i][role_j] -= 5;
			}
			
			if(map[count][role_i-1][role_j]==9)
			{
				count++;
			}
			
			if(map[count][role_i-1][role_j]==6)
			{
				count--;
			}
			
			if(map[count][role_i-1][role_j]==4)
			{
				map[count][role_i - 1][role_j] += 1;
				map[count][role_i][role_j] -= 5;
				key++;
			}
			
			if(map[count][role_i-1][role_j]==2)
			{
				if(key>=1)
				{
				map[count][role_i - 1][role_j] += 3;
				map[count][role_i][role_j] -= 5;
				key--;
				}
			}
if(map[count][role_i-1][role_j]==8)
		{
				UINT uRet=MessageBox(NULL,"小怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon1_alatck;
						mon1_hp-=role_alatck1;
					}
					while(mon1_hp>0);
					if(mon1_hp<=0){
				map[count][role_i - 1][role_j] -= 3;
				map[count][role_i][role_j] -= 5;
				exp+=10;
			}
				}
		}
		
		if(map[count][role_i-1][role_j]==3)
		{
				UINT uRet=MessageBox(NULL,"中怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon2_alatck;
						mon2_hp-=role_alatck2;
					}
					while(mon2_hp>0);
					if(mon2_hp<=0){
				map[count][role_i - 1][role_j] += 2;
				map[count][role_i][role_j] -= 5;
				exp+=20;
			}
				}
		}
		
				if(map[count][role_i-1][role_j]==11)
		{
				UINT uRet=MessageBox(NULL,"大怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon3_alatck;
						mon3_hp-=role_alatck3;
					}
					while(mon3_hp>0);
					if(mon3_hp<=0){
				map[count][role_i - 1][role_j] -= 6;
				map[count][role_i][role_j] -= 5;
				exp+=40;
			}
				}
		}
		
						if(map[count][role_i-1][role_j]==12)
		{
				UINT uRet=MessageBox(NULL,"boss","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=boss_alatck;
						boss_hp-=role_alatckb;
					}
					while(boss_hp>0);
					if(boss_hp<=0){
				map[count][role_i - 1][role_j] -= 7;
				map[count][role_i][role_j] -= 5;
				exp+=60;
			}
				}
		}
		
		if(map[count][role_i-1][role_j]==7)
		{
		if(hp<maxhp)
		{
		if(hp>=maxhp-80)
		{
			hp=maxhp;
		}
		else{
		hp+=80;
		}
			map[count][role_i - 1][role_j] -=2;
			map[count][role_i][role_j] -=5;
	}
	
	}
		
			
			break;
		case 's':
		case 'S':
		case 80:
			if (map[count][role_i + 1][role_j] == 0)
			{

				map[count][role_i + 1][role_j] += 5;
				map[count][role_i][role_j] -= 5;
			}
						
			if(map[count][role_i+1][role_j]==9)
			{
				count++;
			}
			
			if(map[count][role_i+1][role_j]==6)
			{
				count--;
			}
			
			if(map[count][role_i+1][role_j]==4)
			{
				map[count][role_i+1][role_j] += 1;
				map[count][role_i][role_j] -= 5;
				key++;
			}
			
			if(map[count][role_i+1][role_j]==2)
			{
				if(key>=1)
				{
				map[count][role_i + 1][role_j] += 3;
				map[count][role_i][role_j] -= 5;
				key--;
				}
			}
			
			if(map[count][role_i+1][role_j]==8)
		{
				UINT uRet=MessageBox(NULL,"小怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon1_alatck;
						mon1_hp-=role_alatck1;
					}
					while(mon1_hp>0);
					if(mon1_hp<=0){
				map[count][role_i + 1][role_j] -= 3;
				map[count][role_i][role_j] -= 5;
				exp+=10;
			}
				}
		}
			
			if(map[count][role_i+1][role_j]==3)
		{
				UINT uRet=MessageBox(NULL,"中怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon2_alatck;
						mon2_hp-=role_alatck2;
					}
					while(mon2_hp>0);
					if(mon2_hp<=0){
				map[count][role_i + 1][role_j] += 2;
				map[count][role_i][role_j] -= 5;
				exp+=20;
			}
				}
		}
			
							if(map[count][role_i+1][role_j]==11)
		{
				UINT uRet=MessageBox(NULL,"大怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon3_alatck;
						mon3_hp-=role_alatck3;
					}
					while(mon3_hp>0);
					if(mon3_hp<=0){
				map[count][role_i + 1][role_j] -= 6;
				map[count][role_i][role_j] -= 5;
				exp+=40;
			}
				}
		}
		
						if(map[count][role_i+1][role_j]==12)
		{
				UINT uRet=MessageBox(NULL,"boss","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=boss_alatck;
						boss_hp-=role_alatckb;
					}
					while(boss_hp>0);
					if(boss_hp<=0){
				map[count][role_i + 1][role_j] -= 7;
				map[count][role_i][role_j] -= 5;
				exp+=60;
			}
				}
		}
			
			if(map[count][role_i+1][role_j]==7)
		{
		if(hp<maxhp)
		{
		if(hp>=maxhp-80)
		{
			hp=maxhp;
		}
		else{
		hp+=80;}
			map[count][role_i + 1][role_j] -=2;
			map[count][role_i][role_j] -=5;
	}
	
	}
			
			
			break;
		case 'a':
		case 'A':
		case 75:
			if (map[count][role_i][role_j - 1] == 0)
			{
				map[count][role_i][role_j - 1] += 5;
				map[count][role_i][role_j] -= 5;
			}
			
			if(map[count][role_i][role_j-1]==9)
			{
				count++;
			}
			
			if(map[count][role_i][role_j-1]==6)
			{
				count--;
			}
			
			if(map[count][role_i][role_j-1]==4)
			{
				map[count][role_i ][role_j-1] += 1;
				map[count][role_i][role_j] -= 5;
				key++;
			}
			
			if(map[count][role_i][role_j-1]==2)
			{
				if(key>=1)
				{
				map[count][role_i ][role_j-1] += 3;
				map[count][role_i][role_j] -= 5;
				key--;
				}
			}
			
			if(map[count][role_i][role_j-1]==8)
		{
				UINT uRet=MessageBox(NULL,"小怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon1_alatck;
						mon1_hp-=role_alatck1;
					}
					while(mon1_hp>0);
					if(mon1_hp<=0){
				map[count][role_i][role_j-1] -= 3;
				map[count][role_i][role_j] -= 5;
				exp+=10;
			}
				}
		}
		
		if(map[count][role_i][role_j-1]==3)
		{
				UINT uRet=MessageBox(NULL,"中怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon2_alatck;
						mon2_hp-=role_alatck2;
					}
					while(mon2_hp>0);
					if(mon2_hp<=0){
				map[count][role_i][role_j-1] += 2;
				map[count][role_i][role_j] -= 5;
				exp+=20;
			}
				}
		}
		
						if(map[count][role_i][role_j-1]==11)
		{
				UINT uRet=MessageBox(NULL,"大怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon3_alatck;
						mon3_hp-=role_alatck3;
					}
					while(mon3_hp>0);
					if(mon3_hp<=0){
				map[count][role_i][role_j-1] -= 6;
				map[count][role_i][role_j] -= 5;
				exp+=40;
			}
				}
		}
		
						if(map[count][role_i][role_j-1]==12)
		{
				UINT uRet=MessageBox(NULL,"boss","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=boss_alatck;
						boss_hp-=role_alatckb;
					}
					while(boss_hp>0);
					if(boss_hp<=0){
				map[count][role_i][role_j-1] -= 7;
				map[count][role_i][role_j] -= 5;
				exp+=60;
			}
				}
		}
		
		if(map[count][role_i][role_j-1]==7)
		{
		if(hp<maxhp)
		{
		if(hp>=maxhp-80)
		{
			hp=maxhp;
		}
		else{
		hp+=80;}
			map[count][role_i ][role_j-1] -=2;
			map[count][role_i][role_j] -=5;
	}
	
	}
			
			break;
		case'd':
		case'D':
		case 77:
			if (map[count][role_i][role_j + 1] == 0)
			{
				map[count][role_i][role_j + 1] += 5;
				map[count][role_i][role_j] -= 5;
			}
			
			if(map[count][role_i][role_j+1]==9)
			{
				count++;
			}
			
			if(map[count][role_i][role_j+1]==6)
			{
				count--;
			}
			
			if(map[count][role_i][role_j+1]==4)
			{
				map[count][role_i][role_j+1] += 1;
				map[count][role_i][role_j] -= 5;
				key++;
			}
			
			if(map[count][role_i][role_j+1]==2)
			{
				if(key>=1)
				{
				map[count][role_i][role_j+1] += 3;
				map[count][role_i][role_j] -= 5;
				key--;
				}
			}
			
			if(map[count][role_i][role_j+1]==8)
		{
				UINT uRet=MessageBox(NULL,"小怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon1_alatck;
						mon1_hp-=role_alatck1;
					}
					while(mon1_hp>0);
					if(mon1_hp<=0){
				map[count][role_i][role_j+1] -= 3;
				map[count][role_i][role_j] -= 5;
				exp+=10;
			}
				}
		}
		
		if(map[count][role_i][role_j+1]==3)
		{
				UINT uRet=MessageBox(NULL,"中怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon2_alatck;
						mon2_hp-=role_alatck2;
					}
					while(mon2_hp>0);
					if(mon2_hp<=0){
				map[count][role_i][role_j+1] += 2;
				map[count][role_i][role_j] -= 5;
				exp+=20;
			}
				}
		}
		
						if(map[count][role_i][role_j+1]==11)
		{
				UINT uRet=MessageBox(NULL,"大怪","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=mon3_alatck;
						mon3_hp-=role_alatck3;
					}
					while(mon3_hp>0);
					if(mon3_hp<=0){
				map[count][role_i ][role_j+1] -= 6;
				map[count][role_i][role_j] -= 5;
				exp+=40;
			}
				}
		}
		
						if(map[count][role_i][role_j+1]==12)
		{
				UINT uRet=MessageBox(NULL,"boss","要战斗吗？",MB_YESNO);
				if(uRet==IDYES)
				{
					do
					{
						hp-=boss_alatck;
						boss_hp-=role_alatckb;
					}
					while(boss_hp>0);
					if(boss_hp<=0){
				map[count][role_i][role_j+1] -= 7;
				map[count][role_i][role_j] -= 5;
				exp+=60;
			}
				}
		}
		
		if(map[count][role_i][role_j+1]==7)
		{
		if(hp<maxhp)
		{
		if(hp>=maxhp-80)
		{
			hp=maxhp;
		}
		else{
		hp+=80;}
		map[count][role_i][role_j+1] -=2;
		map[count][role_i][role_j] -=5;
	}
	
	}
			
			break;
		}
	}
}

int main()
{
	startup();
	save();
	while (1) {
		show();
		updateWithoutInput();
		updateWithInput();
	}


	return 0;
}


